#!/usr/bin/env python
import yaml
import os

import compute
import kimobjects
from pipeline import Director
from config import *
from logger import logging
logger = logging.getLogger("pipeline")

def run_verifiers(kimobj):
    d = Director()

    if isinstance(kimobj, kimobjects.Test):
        verifiers = list(kimobjects.VerificationTest.all())
    elif isinstance(kimobj, kimobjects.Model):
        verifiers = list(kimobjects.VerificationModel.all())
    else:
        return

    allpassed = []
    for v in verifiers:
        comp = compute.Computation(v, kimobj, d.get_result_code())
        try:
            comp.run()
            resultfile = os.path.join(comp.full_result_path, 'results.yaml')
            docs = yaml.load_all(open(resultfile))
            for di in docs:
                if di.has_key('check'):
                    passed = di['check']['passed']
        except Exception as e:
            passed = False
        allpassed.append(passed)
    return [v.kim_code for v in verifiers],allpassed

if __name__ == "__main__":
    import sys
    if len(sys.argv) > 1:
        name = sys.argv[1]

    try:
        t = kimobjects.Test(name)
    except Exception as e:
        try:
            t = kimobjects.Model(name)
        except Exception as e:
            raise AssertionError("Could not make test or model object")
    v,p = run_verifiers(t)

    logger.info("==================================================")
    logger.info("Verification check report:")
    logger.info("==================================================")
    if len(list(v)) > 0:
        maxlen = max([len(s) for s in v])
        for tv, tp in zip(v,p):
            if tp == True:
                logger.info(tv+"  " + " "*(maxlen-len(tv))+ ":\t PASS")
            else:
                logger.info(tv+"  " + " "*(maxlen-len(tv))+ ":\t ERROR")
    else:
        logger.info("ERROR: No verification checks found")

