#!/usr/bin/python
import ase
from ase.structure import bulk
import numpy as np
import scipy.optimize as opt
from kimcalculator import *
import simplejson
import sys

symbol  = raw_input()
lattice = raw_input()
model   = raw_input()

print symbol, lattice, model
def energy(a, calc):
    atoms = bulk(symbol, lattice, a=a)  
    atoms.set_calculator(calc)
    try:
        energy = atoms.get_potential_energy()
    except:
        energy = 1e10
    return energy

calc = KIMCalculator(model)
from kimservice import *
atoms = bulk(symbol, lattice, a=100)  
atoms.set_calculator(calc)
cutoff = KIM_API_get_data_double(calc.pkim, "cutoff")[0]

#results = opt.brent(energy, args=(calc,), brack=(cutoff*0.2,cutoff)) 
results = opt.fmin(energy, cutoff/2.0, args=(calc,))[0]
print simplejson.dumps({"lattice_const": results, "energy": energy(results, calc)})

