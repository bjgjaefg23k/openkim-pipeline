#!/usr/bin/python
import ase
from ase.structure import bulk
from ase.lattice.cubic import FaceCenteredCubic
import numpy as np
from chooseSurfaces import *
from surface import *
from kimcalculator import *
from analysis import *
import simplejson
import pickle

symbol = raw_input()
model = raw_input()

def sweepSurfaces(calc, N=10):

    surfaceEnergyDict = {}
    energies=[]
    file = open('IndexList.pkl','r')
    list_of_indices = pickle.load(file)
    list_of_indices = list_of_indices[0:N]
    #list_of_indices = [[1,0,0],[1,1,1],[1,1,0]] 
    atoms = FaceCenteredCubic(symbol,directions=[[1,0,0],[0,1,0],[0,0,1]],size=(3,3,3))
    atoms.set_calculator(calc)
    unit_e_bulk = atoms.get_potential_energy()/atoms.get_number_of_atoms()
    for miller in list_of_indices:
        print miller
        E_unrelaxed, E_relaxed = getSurfaceEnergy(miller, calc, unit_e_bulk)
        surfaceEnergyDict['Surface Energy ' +str(miller)] = E_relaxed
        energies.append(E_relaxed)   
 
    return list_of_indices, np.array(energies), surfaceEnergyDict

def getSurfaceEnergy(miller, calc, unit_e_bulk):
    
    surf = makeSurface(symbol,'fcc',miller,size = (3, 3, 10))
    e_unrelaxed, e_relaxed = surface_energy(surf, calc)
    e_bulk = unit_e_bulk*surf.get_number_of_atoms()
    surface_vector = np.cross(surf.cell[0],surf.cell[1])
    surface_area = np.sqrt(np.dot(surface_vector,surface_vector))
    E_unrelaxed = (e_unrelaxed-e_bulk)/(2*surface_area)
    E_relaxed = (e_relaxed-e_bulk)/(2*surface_area)
    
    return E_unrelaxed, E_relaxed

def fitBrokenBond(indices, energies, n=3, p0=[0.1,0.1,0.01],correction=0):

    indices = np.array(indices)
    
    bfparams, cov_x, cost, range, max_error = fitSurfaceEnergies(indices,energies,n=n,p0=p0,correction=correction)     

    return bfparams

def plotBrokenBondFit(indices,energies,bfparams,index0=[1,-1,0],poleaxis=[1,1,0],corrections=0):
   
    
    plotSubSet(indices,energies,index0,poleaxis,bfparams)
    pylab.savefig('Al'+model+'BrokenBondFit.png')
    

calc = KIMCalculator(model)
indices, energies, surfaceEnergyDict = sweepSurfaces(calc, N=3)
bfparams = fitBrokenBond(indices, energies)
plotBrokenBondFit(indices,energies,bfparams)
results = {'Broken Bond Parameter (110)': bfparams[0],'Broken Bond Parameter (100)':bfparams[1],'Broken Bond Parameter (112)': bfparams[2]}
print simplejson.dumps(results)

