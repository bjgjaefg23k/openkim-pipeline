import os, re, glob, sys
import string
import shutil
import tempfile
import datetime
import simplejson
from contextlib import nested

def CreateMetaData(name, oldname, driver):
    dic = {"kim_code": name, "title": oldname, "is_model_param": True, 
           "test_drivers": [driver], "reference": "", "disclaimer": "",
           "description": "autogenerated models and model_drivers from various sources",
           "license": "NONE", "uploaded_by": "KIM",
           "created_at": datetime.datetime.now().isoformat(), "updated_at": None}
    simplejson.dump(dic, open("metadata.json", "w"))


def InFileTextReplacement(filename, oldtxt, newtxt):
    tmpfile = ""
    with nested(open(filename, "r"), tempfile.NamedTemporaryFile("w", delete=False)) as (f,o):
        #data = f.read()
        for data in f:
            newdata = re.sub(oldtxt, newtxt, data)
            newdata = re.sub("KIM_API_STATUS", "KIM_API_status", newdata)
            if newdata == data:
                newdata = re.sub(oldtxt.lower(), newtxt.lower(), data)
            #if newdata != data and len(newdata) > 30  and filename.endswith("F90"):
            #    newdata = re.sub("__FILE__", "\"HELP\"", newdata)
            newdata = re.sub("__FILE__", "\"HELP\"", newdata)
            o.write( newdata ) 
        tmpfile = o.name
    shutil.move(tmpfile, filename)


def ConvertName(src, dst, driver, replacements=None):
    replacements = replacements or {}
    shutil.move(src, dst)                   #os.system("mv %s %s" % (src, dst))  #mv $head $to
    os.chdir(dst)                           #os.system("cd %s" % dst)            #cd $to
    for f in glob.glob("./%s*" % src):      # for file in `ls $head*`; do
        newf = string.replace(f, src, dst)  # newf=`echo $f|sed -e s/$head/$to/`
        shutil.move(f, newf)                # mv $f $newf
    for f in glob.glob("./*"):              # for f in `ls *`; do
        if not os.path.isdir(f):
            InFileTextReplacement(f, src, dst)
            for key,val in replacements.iteritems():
                if f.endswith("Makefile"):
                    InFileTextReplacement(f, key, val)
    CreateMetaData(dst, src, driver)
    os.chdir("..")


def ConvertModelDriver(drivers):
    tmpfile = ""

    for filename in glob.glob("*/Makefile"):
        print "Converting model driver name for ", filename
        with nested(open(filename, "r"), tempfile.NamedTemporaryFile("w", delete=False)) as (f,o):
            for line in f:
                if line.startswith("MODEL_DRIVER_NAME"):
                    print "Found on line", line 
                    for key,val in drivers.iteritems():
                        line = re.sub(key,val, line)
                o.write(line)
            tmpfile = o.name
        shutil.move(tmpfile, filename)


model_drivers = {}
import cPickle as pickle
moids = pickle.load(open("mo_ids.pickle"))
mdids = pickle.load(open("md_ids.pickle"))

def ConvertAll():
    os.chdir("MODEL_DRIVERs")
    for f in os.listdir("./"):
        if os.path.isdir(f):
            oldname = f
            newname = f+"__"+mdids.pop()
            print "Converting model ", oldname, "to", newname
            model_drivers.update({oldname: newname})
            ConvertName(oldname, newname, oldname)
    
    os.chdir("../MODELs")
    for f in os.listdir("./"):
        if os.path.isdir(f):
            oldname = f
            newname = f+"__"+moids.pop()
            print "Converting model ", oldname, "to", newname
            ConvertName(oldname, newname, oldname)

    ConvertModelDriver(model_drivers)

if __name__ == "__main__":
    ConvertAll()
        
