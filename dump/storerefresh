#! /usr/bin/env python
""" This file is meant to refresh the stores if we ever get out of sync """

import kimid
from persistentdict import PersistentDict, PersistentDefaultDict
from config import *
import repository as repo
import os
import subprocess
logger = logger.getChild("storerefresh")
from contextlib import nested


logger.info("running store refresh")


try:
    os.remove(KIMID_STORE)
except OSError:
    pass

try:
    os.remove(MATCH_STORE)
except OSError:
    pass

try:
    os.remove(TEST_RESULT_STORE)
except OSError:
    pass

try:
    os.remove(NAME_STORE)
except OSError:
    pass

subprocess.call("python kimid.py init",shell=True)

allkimids = []
for dir in KIM_REPO_DIRS:
    logger.debug("in dir %r",dir)
    for kid in (subdir for subdir in os.listdir(dir) if os.path.isdir(os.path.join(dir,subdir))):
        logger.debug("found %r",kid)
        allkimids.append(kid)
logger.debug("allkimids %r",allkimids)

#try to populate all of the kimids
with nested(PersistentDefaultDict(KIMID_STORE),PersistentDefaultDict(NAME_STORE)) as (store, name_store):
    for kid in allkimids:
        logger.debug("adding %r",kid)
        front,leader,pk,version = kimid.parse_kimid(kid)
        
        #kid = str(leader) + "_" + str(pk) + "_" + str(version)
        kid = kimid.format_kimid(leader,int(pk),int(version))
        name_store[kid] = front
        #I'm cheating here.
        name_store[kid[:-4]] = front
        
        #leader = str(front)+leader
        substore = store[leader]
        if pk in store[leader]:
            if version > store[leader][pk]:
                store[leader][pk] = version
        else:
            store[leader][pk] = version

#try to populate the test result store
with PersistentDefaultDict(TEST_RESULT_STORE) as store:
    for pred in os.listdir(KIM_TEST_RESULTS_DIR):
        predpath = os.path.join(KIM_TEST_RESULTS_DIR,pred)
        if os.path.isdir(predpath):
            logger.debug("found pred %r",pred)
            info = repo.load_info_file(os.path.join(predpath,pred))
            testname = info["_testname"]
            modelname = info["_modelname"]
            store[testname][modelname] = pred

logger.info("finished store refresh")


