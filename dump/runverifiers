#!/usr/bin/env python
import compute
import kimobjects
from config import *
from logger import logging
from pipeline import Director
logger = logging.getLogger("pipeline")

d = Director()

def run_verifiers(kimobj):

    if isinstance(kimobj, kimobjects.Test):
        verifiers = list(kimobjects.VerificationTest.all())
    elif isinstance(kimobj, kimobjects.Model):
        verifiers = list(kimobjects.VerificationModel.all())
    else:
        return

    allpassed = []
    for v in verifiers:
        comp = compute.Computation(v, kimobj, d.get_result_code())
        try:
            comp.run()
            passed = comp.results['pass']
        except Exception as e:
            passed = False
        allpassed.append(passed)
    return [v.kim_code for v in verifiers],allpassed

for test in kimobjects.Test.all():
    v,p = run_verifiers(test)
    logger.info("==================================================")
    logger.info("Verification check report:")
    logger.info("==================================================")
    if len(list(v)) > 0:
        maxlen = max([len(s) for s in v])
        for tv, tp in zip(v,p):
            if tp == True:
                logger.info(tv+"  " + " "*(maxlen-len(tv))+ ":\t PASS")
            else:
                logger.info(tv+"  " + " "*(maxlen-len(tv))+ ":\t ERROR")

for model in kimobjects.Model.all():
    v,p = run_verifiers(model)
    logger.info("==================================================")
    logger.info("Verification check report:")
    logger.info("==================================================")
    if len(list(v)) > 0:
        maxlen = max([len(s) for s in v])
        for tv, tp in zip(v,p):
            if tp == True:
                logger.info(tv+"  " + " "*(maxlen-len(tv))+ ":\t PASS")
            else:
                logger.info(tv+"  " + " "*(maxlen-len(tv))+ ":\t ERROR")


