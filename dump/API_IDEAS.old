Some ideas for the API

# overarching data access syntax

Members of the kimobjects accessed with /
Dictionary keys accessed with .
Queries take the shape: (? blah.bleh == 'hi' and prim.stuff == )


kimobject_view:

kimobjects_view:

dictionary_view:

file_view:


#=========================================
EXAMPLE Tree

/api/
    /te/ - kimobjects_view(all tests)
    /mo/ - kimobjects_view(all models)
    /rd/ - kimobjects_view(all rds)
    ...


    /TE_------/ - kimobject_view(TE_---)
    /MO_-----/ - kimobject_view(MO_---)
    ...

   
#=========================================
Thoughts

api('/te/')
api('/TE_----/TR.prim_.a')

class KIMData(object):
   """ A simple wrapper to getting data """

   def __getitem__(self,item):
       if len(item) == 2:
           return code_to_model[item.upper()].all()
       else:
           return kim_obj(item)

def api(query, base=None):
    if not query:
        return base
        
    targs =  query.split('/')
    arg0,args = targs[0], targs[1:]
    # arg0,*args = targs - in python3k

    obj = base.__getattr__(arg0)() or KIMData()
    members = dict_follow(arg0, obj)

    return api("/".join(args),obj)

def dict_follow(query, obj):
    if not query:
        return obj
    targs = query.split('.')
    arg0, *args = targs[0], targs[1:]
    return dict_follow(".".join(args), obj[arg0])

#=========================================


#==========================================
/api/KIM_CODE

returns the metadata for the KIM_CODE

for tests

/api/KIM_CODE/metadata/key
    gives value at key

Everyone
/api/KIM_CODE
    ../metadata
        Gives metadata
    ../makefile
        returns makefile

Test
/api/TE_0000000001_000/
    Gives the metadata
    ../models
        list the models that couple
    ../results
        list the results generated
    ../pipeline.in
        gives the inputfile
    ../pipeline.json
        gives the template file
    ../test_drivers
        lists the test drivers
    ../MO_00000000..
        list the results with model
Model
/api/MO_00000000
    gives metadata
    ../tests
        lists valid tests
    ../results
        lists results
    ../model_driver
        lists the model driver
    ../TE_0000000001_000
        shows results with model

TestResult
/api/TR_000
    gives json
    .json
        gives json
    ../test/
        gives test
    ../model/
        gives model
    ../properties/
        gives properties
    ../files
        lists files

/api/primitives/name
    gives metadata
    ../schema
        gives schema
    ../properties
        gives properties

/api/schema/name
    gives schema
    ../primitives
        lists primitives

/api/TD_000
    gives metadata
    ../tests
        list tests

/api/MD_000
    gives modeldriver


some querystrings (for TRs)
    elem=   filter by element
    structure= filter by structure
    spacegroup= filter by spacegroup
    

